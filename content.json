{"meta":{"title":"My blog","subtitle":"","description":"","author":"Ciallo-Ani","url":"http://example.com","root":"/"},"pages":[{"title":"about","date":"2021-12-14T16:56:35.000Z","updated":"2021-12-14T16:56:35.266Z","comments":true,"path":"about/index.html","permalink":"http://example.com/about/index.html","excerpt":"","text":""}],"posts":[{"title":"MYSQL—数据类型和常用函数","slug":"mysql","date":"2021-12-23T04:11:25.000Z","updated":"2021-12-27T08:47:29.712Z","comments":true,"path":"2021/12/23/mysql/","link":"","permalink":"http://example.com/2021/12/23/mysql/","excerpt":"","text":"数据类型介绍MySQL中定义数据字段的类型对你数据库的优化是非常重要的。 MySQL支持多种类型，大致可以分为三类：数值、日期/时间和字符串(字符)类型。 1. 数值类型 MySQL支持所有标准SQL数值数据类型。 这些类型包括严格数值数据类型(INTEGER、SMALLINT、DECIMAL和NUMERIC)，以及近似数值数据类型(FLOAT、REAL和DOUBLE PRECISION)。 关键字INT是INTEGER的同义词，关键字DEC是DECIMAL的同义词。 BIT数据类型保存位字段值，并且支持MyISAM、MEMORY、InnoDB和BDB表。 作为SQL标准的扩展，MySQL也支持整数类型TINYINT、MEDIUMINT和BIGINT。下面的表显示了需要的每个整数类型的存储和范围。 ———————————————— 2. 日期和时间类型 表示时间值的日期和时间类型为DATETIME、DATE、TIMESTAMP、TIME和YEAR。 每个时间类型有一个有效值范围和一个”零”值，当指定不合法的MySQL不能表示的值时使用”零”值。 TIMESTAMP类型有专有的自动更新特性，将在后面描述。 结束时间是第 2147483647 秒，北京时间 2038-1-19 11:14:07，格林尼治时间 2038年1月19日 凌晨 03:14:07 YYYYMMDD HHMMSS 混合日期和时间值，时间戳 3. 字符串类型字符串类型指CHAR、VARCHAR、BINARY、VARBINARY、BLOB、TEXT、ENUM和SET。该节描述了这些类型如何工作以及如何在查询中使用这些类型。 CHAR 和 VARCHAR 类型类似，但它们保存和检索的方式不同。它们的最大长度和是否尾部空格被保留等方面也不同。在存储或检索过程中不进行大小写转换。 BINARY 和 VARBINARY 类似于 CHAR 和 VARCHAR，不同的是它们包含二进制字符串而不要非二进制字符串。也就是说，它们包含字节字符串而不是字符字符串。这说明它们没有字符集，并且排序和比较基于列值字节的数值值。 BLOB 是一个二进制大对象，可以容纳可变数量的数据。有 4 种 BLOB 类型：TINYBLOB、BLOB、MEDIUMBLOB 和 LONGBLOB。它们区别在于可容纳存储范围不同。 有 4 种 TEXT 类型：TINYTEXT、TEXT、MEDIUMTEXT 和 LONGTEXT。对应的这 4 种 BLOB 类型，可存储的最大长度不同，可根据实际情况选择。 常用函数 mysql内置函数列表可以从mysql官方文档查询，这里仅分类简单介绍一些可能会用到的函数。 1. 数学函数$$abs(x) pi() mod(x,y)：余数 sqrt(x)：开平方根 ceil(x)或者ceiling(x) rand(),rand(N):返回0-1间的浮点数，使用不同的seed N可以获得不同的随机数 round(x, D)：四舍五入保留D位小数，D默认为0， 可以为负数， 如round(19, -1)返回20 truncate(x, D):截断至保留D位小数，D可以为负数， 如trancate(19,-1)返回10 sign(x): 返回x的符号，正负零分别返回1， -1， 0 pow(x,y)或者power(x,y) exp(x)：e^x log(x)：自然对数 log10(x)：以10为底的对数 radians(x):角度换弧度 degrees(x):弧度换角度 sin(x)和asin(x): cos(x)和acos(x): tan(x)和atan(x): cot(x):$$ 2. 字符串函数 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455char_length(str):返回str所包含的字符数，一个多字节字符算一个字符length(str): 返回字符串的字节长度，如utf8中，一个汉字3字节，数字和字母算一个字节concat(s1, s1, ...): 返回连接参数产生的字符串concat_ws(x, s1, s2, ...): 使用连接符x连接其他参数产生的字符串INSERT(str,pos,len,newstr):返回str,其起始于pos，长度为len的子串被newstr取代。\\1. 若pos不在str范围内，则返回原字符串str\\2. 若str中从pos开始的子串不足len,则将从pos开始的剩余字符用newstr取代\\3. 计算pos时从1开始，若pos=3,则从第3个字符开始替换lower（str)或者lcase(str):upper(str)或者ucase(str):left(s,n):返回字符串s最左边n个字符right(s,n): 返回字符串最右边n个字符lpad(s1, len, s2): 用s2在s1左边填充至长度为len, 若s1的长度大于len,则截断字符串s1至长度len返回rpad(s1, len, s2):ltrim(s):删除s左侧空格字符rtrim(s):TRIM([&#123;BOTH | LEADING | TRAILING&#125; [remstr] FROM] str)或TRIM([remstr FROM] str)：从str中删除remstr, remstr默认为空白字符REPEAT(str,count)：返回str重复count次得到的新字符串REPLACE(str,from_str,to_str)： 将str中的from_str全部替换成to_strSPACE(N):返回长度为N的空白字符串STRCMP(str1,str2):若str1和str2相同，返回0， 若str1小于str2, 返回-1， 否则返回1.SUBSTRING(str,pos), SUBSTRING(str FROM pos), SUBSTRING(str,pos,len), SUBSTRING(str FROM pos FOR len),MID(str,pos,len): 获取特定位置，特定长度的子字符串LOCATE(substr,str), LOCATE(substr,str,pos),INSTR(str,substr),POSITION(substr IN str): 返回字符串中特定子串的位置，注意这里INSTR与其他函数的参数位置是相反的REVERSE(str)ELT(N,str1,str2,str3,...)：返回参数strN, 若N大于str参数个数，则返回NULLFIELD(str,str1,str2,str3,...): 返回str在后面的str列表中第一次出现的位置，若找不到str或者str为NULL, 则返回0FIND_IN_SET(str,strlist)：strlist是由&#x27;,&#x27;分隔的字符串，若str不在strlist或者strlist为空字符串，则返回0；若任意一个参数为NULL则返回ＮＵＬＬMAKE_SET(bits,str1,str2,...): 由bits的作为位图来选取strN参数，选中的参数用&#x27;,&#x27;连接后返回 3. 日期和时间函数 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899CURDATE(), CURRENT_DATE, CURRENT_DATE():用于获取当前日期，格式为&#x27;YYYY-MM-DD&#x27;; 若+0则返回YYYYMMDDUTC_DATE, UTC_DATE():返回当前世界标准时间CURTIME([fsp]), CURRENT_TIME, CURRENT_TIME([fsp]): 用于获取当前时间， 格式为&#x27;HH:MM:SS&#x27; 若+0则返回 HHMMSSUTC_TIME, UTC_TIME([fsp])CURRENT_TIMESTAMP, CURRENT_TIMESTAMP([fsp]), LOCALTIME, LOCALTIME([fsp]), SYSDATE([fsp]), NOW([fsp]): 用于获取当前的时间日期，格式为&#x27;YYYY-MM-DD HH:MM:SS&#x27;，若+0则返回YYYYMMDDHHMMSSUTC_TIMESTAMP, UTC_TIMESTAMP([fsp])UNIX_TIMESTAMP(), UNIX_TIMESTAMP(date)：返回一个unix时间戳（&#x27;1970-01-01 00:00:00&#x27; UTC至今或者date的秒数），这实际上是从字符串到整数的一个转化过程FROM_UNIXTIME(unix_timestamp), FROM_UNIXTIME(unix_timestamp,format)：从时间戳返回&#x27;YYYY-MM-DD HH:MM:SS&#x27; 或者YYYYMMDDHHMMSS，加入format后根据所需的format显示。MONTH(date)MONTHNAME(date)DAYNAME(date)DAY(date)，DAYOFMONTH(date)：1-31或者0DAYOFWEEK(date)：1-7==&gt;星期天-星期六DAYOFYEAR(date)：1-365（366）WEEK(date[,mode])：判断是一年的第几周，如果1-1所在周在新的一年多于4天，则将其定为第一周；否则将其定为上一年的最后一周。mode是用来人为定义一周从星期几开始。WEEKOFYEAR(date)：类似week(date,3)，从周一开始计算一周。QUARTER(date)：返回1-4HOUR(time)：返回时间中的小时数，可以大于24MINUTE(time)：SECOND(time)：EXTRACT(unit FROM date)：提取日期时间中的要素- - - - ​```SELECT EXTRACT(YEAR FROM &#x27;2009-07-02&#x27;); ##2009SELECT EXTRACT(YEAR_MONTH FROM &#x27;2009-07-02 01:02:03&#x27;);##200907SELECT EXTRACT(DAY_MINUTE FROM &#x27;2009-07-02 01:02:03&#x27;);##20102SELECT EXTRACT(MICROSECOND FROM &#x27;2003-01-02 10:30:00.000123&#x27;);##123​```TIME_TO_SEC(time)SEC_TO_TIME(seconds)TO_DAYS(date): 从第0年开始的天数TO_SECNDS(expr)：从第0年开始的秒数ADDDATE(date,INTERVAL expr unit), ADDDATE(expr,days),DATE_ADD(date,INTERVAL expr unit)DATE_SUB(date,INTERVAL expr unit), DATE_SUB(date,INTERVAL expr unit)ADDTIME(expr1,expr2)SUBTIME(expr1,expr2)- - ​```SELECT ADDTIME(&#x27;2007-12-31 23:59:59.999999&#x27;, &#x27;1 1:1:1.000002&#x27;);##&#x27;2008-01-02 01:01:01.000001&#x27;SELECT ADDTIME(&#x27;01:00:00.999999&#x27;, &#x27;02:00:00.999998&#x27;);##&#x27;03:00:01.999997&#x27;​```注意：时间日期的加减也可以直接用+/-来进行- - - - - ​```date + INTERVAL expr unitdate - INTERVAL expr unitSELECT &#x27;2008-12-31 23:59:59&#x27; + INTERVAL 1 SECOND;##&#x27;2009-01-01 00:00:00&#x27;SELECT INTERVAL 1 DAY + &#x27;2008-12-31&#x27;;##&#x27;2009-01-01&#x27;SELECT &#x27;2005-01-01&#x27; - INTERVAL 1 SECOND;##&#x27;2004-12-31 23:59:59&#x27; ​```DATE_FORMAT(date,format):DATEDIFF(expr1,expr2):返回相差的天数TIMEDIFF(expr1,expr2)：返回相隔的时间 4. 条件判断函数 12345678910111213IF(expr1,expr2,expr3)：如果expr1不为0或者NULL,则返回expr2的值，否则返回expr3的值IFNULL(expr1,expr2)：如果expr1不为NULL,返回expr1,否则返回expr2NULLIF(expr1,expr2): 如果expr1=expr2则返回NULL, 否则返回expr2CASE value WHEN [compare_value] THEN result [WHEN [compare_value] THEN result ...] [ELSE result] END当compare_value=value时返回resultCASE WHEN [condition] THEN result [WHEN [condition] THEN result ...] [ELSE result] END当condition为TRUE时返回result 1SELECT CASE 1 WHEN 1 THEN ‘one’WHEN 2 THEN ‘two’ ELSE ‘more’ END;##‘one’SELECT CASE WHEN 1&gt;0 THEN ‘true’ ELSE ‘false’ END;##‘true’SELECT CASE BINARY ‘B’WHEN ‘a’ THEN 1 WHEN ‘b’ THEN 2 END;##NULL 5. 系统信息函数 12345678910111213VERSION():返回mysql服务器的版本，是utf8编码的字符串CONNECTION_ID()：显示连接号（连接的线程号）DATABASE()，SCHEMA()：显示当前使用的数据库SESSION_USER(), SYSTEM_USER(), USER(), CURRENT_USER, CURRENT_USER():返回当前的用户名@主机，utf8编码字符串CHARSET(str)COLLATION(str)LAST_INSERT_ID()：自动返回最后一个insert或者update查询， 为auto_increment列设置的第一个发生的值 6. 加密和压缩函数 12345678910111213141516171819202122232425262728293031323334353637383940414243PASSWORD(str):这个函数的输出与变量old_password有关。old_password 在mysql5.6中默认为0。old_password=1时， password(str)的效果与old_password(str)相同，由于其不够安全已经弃用（5.6.5以后）。old_password=2时，在生成哈希密码时会随机加盐。MD5(str):计算MD5 128位校验和，返回32位16进制数构成的字符串，当str为NULL时返回NULL。可以用作哈希密码SHA1(str), SHA(str)：计算160位校验和，返回40位16进制数构成的字符串，当str为NULL时返回NULL。SHA2(str, hash_length)：计算SHA-2系列的哈希方法(SHA-224, SHA-256, SHA-384, and SHA-512). 第一个参数为待校验字符串，第二个参数为结果的位数（224， 256， 384， 512）ENCRYPT(str[,salt]): 用unix crypt()来加密str. salt至少要有两位字符，否则会返回NULL。若未指定salt参数，则会随机添加salt。ECODE(crypt_str,pass_str):解密crypt_str, pass_str用作密码ENCODE(str,pass_str)：用pass_str作为密码加密strDES_ENCRYPT(str[,&#123;key_num|key_str&#125;])：用Triple-DES算法编码str， 这个函数只有在mysql配置成支持ssl时才可用。DES_DECRYPT(crypt_str[,key_str])AES_ENCRYPT(str,key_str[,init_vector])AES_DECRYPT(crypt_str,key_str[,init_vector])COMPRESS(string_to_compress)：返回二进制码UNCOMPRESS(string_to_uncompress) 7. 聚合函数 若在没使用group by时使用聚合函数，相当于把所有的行都归于一组来进行处理。除非特殊说明，一般聚合函数会忽略掉NULL. 123456789101112131415161718192021222324252627282930313233343536373839AVG([DISTINCT] expr): 返回expr的平均值，distinct选项用于忽略重复值COUNT([DISTINCT] expr)：返回select中expr的非0值个数，返回值为bigint类型group_concat:连接组内的非空值，若无非空值，则返回NULLGROUP_CONCAT([DISTINCT] expr [,expr …][ ORDER BY &#123;unsigned_integer | col_name | expr&#125;[ASC | DESC] [,col_name …]MAX([DISTINCT] expr)MIN([DISTINCT] expr)SUM([DISTINCT] expr)VAR_POP(expr)VARIANCE(expr)：同VAR_POP(expr)，但是这是标准sql的一个扩展函数VAR_SAMP(expr)STD(expr): 这是标准sql的一个扩展函数STDDEV(expr)：这个函数是为了跟oracle兼容而设置的STDDEV_POP(expr)：这个是sql标准函数STDDEV_SAMP(expr)：样本标准差 8. 格式或类型转化函数 1234567891011FORMAT(X,D[,locale])：将数字X转化成&#x27;#,###,###.##&#x27;格式，D为保留的小数位数CONV(N,from_base,to_base)：改变数字N的进制，返回值为该进制下的数字构成的字符串INET_ATON(expr)：ip字符串转数字INET_NTOA(expr)：数字转ip字符串CAST(expr AS type)：转换数据类型CONVERT(expr,type), CONVERT(expr USING transcoding_name)：type可以为BINARY[(N)]，CHAR[(N)]，DATE，DATETIME， DECIMAL[(M[,D])]，DECIMAL[(M[,D])]，TIME，UNSIGNED [INTEGER]等等。transcoding_name如utf8等等","categories":[],"tags":[{"name":"Markdown","slug":"Markdown","permalink":"http://example.com/tags/Markdown/"},{"name":"Mysql","slug":"Mysql","permalink":"http://example.com/tags/Mysql/"},{"name":"Data Structure","slug":"Data-Structure","permalink":"http://example.com/tags/Data-Structure/"}]},{"title":"笔记 (指针操作2D array)","slug":"ptrIn2DArr","date":"2021-12-13T06:18:21.000Z","updated":"2021-12-13T07:45:43.241Z","comments":true,"path":"2021/12/13/ptrIn2DArr/","link":"","permalink":"http://example.com/2021/12/13/ptrIn2DArr/","excerpt":"","text":"有时需要二维数组传参，但实际上是二级指针传参1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859#include &lt;iostream&gt;#include &lt;math.h&gt;using std::cin;using std::cout;void ShowMartix(int **arr, const int &amp;len)&#123; for(int i = 0; i &lt; len; i++) &#123; for(int j = 0; j &lt; len; j++) &#123; cout &lt;&lt; arr[i][j] &lt;&lt; &quot; &quot;; &#125; cout &lt;&lt; &#x27;\\n&#x27;; &#125;&#125;void CutMartix(int **arr, const int &amp;len)&#123; for(int i = 0; i &lt; len/2; i++) &#123; for(int j = 0; j &lt; len/2; j++) &#123; arr[i][j] = 0; &#125; &#125; cout &lt;&lt; &#x27;\\n&#x27;;&#125;int main()&#123; int n; cin &gt;&gt; n; int len = pow(2, n); int matrix[len][len]; int **p = nullptr; p = (int **)malloc(sizeof(int *) *len); for (int i = 0; i &lt; len*len; i++) &#123; *((int*)matrix + i) = 1; &#125; for(int i = 0; i &lt; len; i ++) &#123; p[i] = matrix[i]; &#125; ShowMartix(p, len); CutMartix(p, len); ShowMartix(p, len); free(p); return 0;&#125;","categories":[],"tags":[{"name":"Markdown","slug":"Markdown","permalink":"http://example.com/tags/Markdown/"},{"name":"C++","slug":"C","permalink":"http://example.com/tags/C/"},{"name":"Algorithm","slug":"Algorithm","permalink":"http://example.com/tags/Algorithm/"}]},{"title":"Hello World","slug":"hello-world","date":"1970-12-31T16:00:00.000Z","updated":"2021-12-13T03:53:08.936Z","comments":true,"path":"1971/01/01/hello-world/","link":"","permalink":"http://example.com/1971/01/01/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[],"tags":[{"name":"Markdown","slug":"Markdown","permalink":"http://example.com/tags/Markdown/"},{"name":"Mysql","slug":"Mysql","permalink":"http://example.com/tags/Mysql/"},{"name":"Data Structure","slug":"Data-Structure","permalink":"http://example.com/tags/Data-Structure/"},{"name":"C++","slug":"C","permalink":"http://example.com/tags/C/"},{"name":"Algorithm","slug":"Algorithm","permalink":"http://example.com/tags/Algorithm/"}]}